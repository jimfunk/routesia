syntax = "proto3";

package routesia.netfilter;


// Zone configuration
//
message Zone {
    // Name of zone
    //
    string name = 1;

    // Interfaces in the zone
    //
    repeated string interface = 2;
}


// Masquerade configuration
//
message Masquerade {
    // Interface name
    //
    string interface = 1;
}


// Policy types
//
enum Policy {
    ACCEPT = 0;
    DROP = 1;
}

// Zone match
//
message ZoneMatch {
    // Input zone
    //
    repeated string input = 1;

    // Output zone
    //
    repeated string output = 2;
}


// IP match
// TODO: support all the fields:
// https://wiki.nftables.org/wiki-nftables/index.php/Quick_reference-nftables_in_10_minutes#Matches
//
message IPMatch {
    // Negate match
    //
    bool negate = 1;

    // Protocol
    //
    repeated string protocol = 2;

    // Source address
    //
    repeated string source = 3;

    // Destination address
    //
    repeated string destination = 4;
}


// IP6 match
//
message IP6Match {
    // Negate match
    //
    bool negate = 1;

    // Protocol
    //
    repeated string protocol = 2;

    // Source address
    //
    repeated string source = 3;

    // Destination address
    //
    repeated string destination = 4;
}


// TCP match
//
message TCPMatch {
    // Negate match
    //
    bool negate = 1;

    // Source port
    //
    repeated string source = 2;

    // Destination port
    //
    repeated string destination = 3;
}


// UDP match
//
message UDPMatch {
    // Negate match
    //
    bool negate = 1;

    // Source port
    //
    repeated string source = 2;

    // Destination port
    //
    repeated string destination = 3;
}


// ICMP match
//
message ICMPMatch {
    // Negate match
    //
    bool negate = 1;

    // Type
    //
    repeated string type = 2;

    // Destination port
    //
    repeated uint32 code = 3;
}


// ICMPv6 match
//
message ICMP6Match {
    // Negate match
    //
    bool negate = 1;

    // Type
    //
    repeated string type = 2;

    // Destination port
    //
    repeated uint32 code = 3;
}


// Connection tracking match
//
message CTMatch {
    // Negate match
    //
    bool negate = 1;

    // State
    //
    repeated string state = 2;
}


// Metadata match
//
message MetaMatch {
    // Negate match
    //
    bool negate = 1;

    // Input interface name
    //
    repeated string input_interface = 2;

    // Output interface name
    //
    repeated string output_interface = 3;

    // Protocol
    //
    repeated string protocol = 4;
}


// Accept verdict
//
message AcceptVerdict {
}


// Drop verdict
//
message DropVerdict {
}


// Masquerade verdict
//
message MasqueradeVerdict {
}


// Rule
//
message Rule {
    ZoneMatch zone = 1;
    repeated IPMatch ip = 2;
    repeated IP6Match ip6 = 3;
    repeated TCPMatch tcp = 4;
    repeated UDPMatch udp = 5;
    repeated ICMPMatch icmp = 6;
    repeated ICMP6Match icmp6 = 7;
    repeated CTMatch ct = 8;
    repeated MetaMatch meta = 9;

    oneof verdict {
        AcceptVerdict accept = 100;
        DropVerdict drop = 101;
        MasqueradeVerdict masquerade = 102;
    }
}


// Input
//
message Input {
    // Policy, accept or drop
    //
    Policy policy = 1;

    // Rules
    //
    repeated Rule rule = 2;
}


// Forward
//
message Forward {
    // Policy, accept or drop
    //
    Policy policy = 1;

    // Rules
    //
    repeated Rule rule = 2;
}


// Netfilter module config
//
message NetfilterConfig {
    repeated Zone zone = 1;
    repeated Masquerade masquerade = 2;
    Input input = 3;
    Forward forward = 4;
}
